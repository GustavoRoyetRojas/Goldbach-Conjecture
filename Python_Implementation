import time
import random
import sys
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor


def miller_rabin(n, k=20):
    """Miller-Rabin primality test with k rounds."""
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False

    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1

    for _ in range(k):
        a = random.randrange(2, min(n - 2, sys.maxsize))
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = (x * x) % n
            if x == n - 1:
                break
        else:
            return False
    return True


def encontrar_pq_optimo_dual(M, timeout=60, max_checks=1000000):
    """Find primes P and Q such that P + Q = M (two threads)."""
    if M % 2 != 0 or M <= 2:
        raise ValueError("M must be even and greater than 2")

    mid = M // 2
    start_time = time.time()

    def search_downward():
        offset = 1 if mid % 2 == 0 else 0
        checks = 0
        while time.time() - start_time < timeout and checks < max_checks:
            p = mid - offset
            if p < 2:
                return None
            if miller_rabin(p):
                q = M - p
                if q > p and miller_rabin(q):
                    return (p, q)
            offset += 2
            checks += 1
        return None

    def search_upward():
        offset = 1 if mid % 2 == 0 else 0
        checks = 0
        while time.time() - start_time < timeout and checks < max_checks:
            p = mid + offset
            if p >= M:
                return None
            if miller_rabin(p):
                q = M - p
                if q > 0 and miller_rabin(q):
                    return (q, p)
            offset += 2
            checks += 1
        return None

    with ThreadPoolExecutor(max_workers=2) as executor:
        future_down = executor.submit(search_downward)
        future_up = executor.submit(search_upward)

        # Get first result that finishes
        done, not_done = concurrent.futures.wait(
            [future_down, future_up],
            return_when=concurrent.futures.FIRST_COMPLETED
        )

        for future in done:
            result = future.result()
            if result:
                # Cancel the other thread if we found a result
                for f in not_done:
                    f.cancel()
                return result

    return None


# Test with large number
M = 4 * 10 ** 30
print(f"Procesando M = {M:,}")

start_time = time.time()
resultado = encontrar_pq_optimo_dual(M, timeout=60)
end_time = time.time()

if resultado:
    print(f"Encontrado: P = {resultado[0]:,}, Q = {resultado[1]:,}")
    print(f"Verificación: {resultado[0]} + {resultado[1]} = {resultado[0] + resultado[1]:,}")
else:
    print("No se encontraron primos P y Q tales que P + Q = M en el tiempo límite.")

print(f"Tiempo de ejecución: {end_time - start_time:.2f} segundos")

import time
import random
import sys
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor

def miller_rabin(n, k=40):
    """Miller-Rabin primality test with k rounds."""
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False
    
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    
    for _ in range(k):
        a = random.randrange(2, min(n-2, sys.maxsize))
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = (x * x) % n
            if x == n - 1:
                break
        else:
            return False
    return True

def encontrar_pq_optimo_boundary(M, timeout=1200, max_checks=100000000):
    """Find primes P and Q such that P + Q = M with 6 threads."""
    if M % 2 != 0 or M <= 2:
        raise ValueError("M must be even and greater than 2")
    
    mid = M // 2
    total_checks = [0]
    result = [None]  # Shared result to signal completion
    
    # Per-thread tracking
    checks_by_thread = {'mid_down': 0, 'mid_up': 0, 'max': 0, 'min': 0}
    primes_by_thread = {
        'mid_down': [], 'mid_up': [], 'max': [], 'min': []
    }
    
    def search_mid_down():
        p = mid - (1 if mid % 2 == 0 else 0)
        while total_checks[0] < max_checks and not result[0]:
            checks_by_thread['mid_down'] += 1
            total_checks[0] += 1
            if p < 2:
                break
            if miller_rabin(p):
                primes_by_thread['mid_down'].append(p)
            p -= 2
    
    def search_mid_up():
        p = mid + (1 if mid % 2 == 0 else 0)
        while total_checks[0] < max_checks and not result[0]:
            checks_by_thread['mid_up'] += 1
            total_checks[0] += 1
            if p >= M:
                break
            if miller_rabin(p):
                primes_by_thread['mid_up'].append(p)
            p += 2
    
    def search_from_max():
        p = M - 1
        while total_checks[0] < max_checks and not result[0]:
            checks_by_thread['max'] += 1
            total_checks[0] += 1
            if p < 2:
                break
            if miller_rabin(p):
                primes_by_thread['max'].append(p)
            p -= 2
    
    def search_from_min():
        p = 2
        first = True
        while total_checks[0] < max_checks and not result[0]:
            checks_by_thread['min'] += 1
            total_checks[0] += 1
            if p >= M:
                break
            if miller_rabin(p):
                primes_by_thread['min'].append(p)
            if first:
                p = 3
                first = False
            else:
                p += 2
    
    def sum_mid(start_time):
        while total_checks[0] < max_checks and time.time() - start_time < timeout and not result[0]:
            mid_primes = primes_by_thread['mid_down'] + primes_by_thread['mid_up']
            for i, p in enumerate(mid_primes):
                for q in mid_primes[i+1:]:
                    if p + q == M:
                        result[0] = (p, q)
                        print(f"Found by sum_mid: P={p}, Q={q} after {time.time() - start_time:.2f}s")
                        return
            time.sleep(0.1)  # Avoid busy-waiting
    
    def sum_boundaries(start_time):
        while total_checks[0] < max_checks and time.time() - start_time < timeout and not result[0]:
            boundary_primes = primes_by_thread['min'] + primes_by_thread['max']
            mid_primes = primes_by_thread['mid_down'] + primes_by_thread['mid_up']
            # Check within boundaries
            for i, p in enumerate(boundary_primes):
                for q in boundary_primes[i+1:]:
                    if p + q == M:
                        result[0] = (p, q)
                        print(f"Found by sum_boundaries (internal): P={p}, Q={q} after {time.time() - start_time:.2f}s")
                        return
                # Check boundaries with mid
                for q in mid_primes:
                    if p + q == M:
                        result[0] = (p, q)
                        print(f"Found by sum_boundaries (cross-mid): P={p}, Q={q} after {time.time() - start_time:.2f}s")
                        return
            time.sleep(0.1)  # Avoid busy-waiting
    
    start_time = time.time()
    with ThreadPoolExecutor(max_workers=6) as executor:
        futures = {
            'mid_down': executor.submit(search_mid_down),
            'mid_up': executor.submit(search_mid_up),
            'max': executor.submit(search_from_max),
            'min': executor.submit(search_from_min),
            'sum_mid': executor.submit(sum_mid, start_time),
            'sum_boundaries': executor.submit(sum_boundaries, start_time)
        }
        
        while time.time() - start_time < timeout and not result[0]:
            done, not_done = concurrent.futures.wait(
                futures.values(),
                timeout=1.0,
                return_when=concurrent.futures.ALL_COMPLETED
            )
            if result[0]:  # Result found by summation threads
                break
        
        # Cancel any remaining futures
        for name, f in futures.items():
            f.cancel()
    
    # Print thread stats
    for thread_name in checks_by_thread:
        print(f"{thread_name}: {checks_by_thread[thread_name]:,} numbers reviewed, {len(primes_by_thread[thread_name]):,} primes found")
    total_primes = sum(len(primes) for primes in primes_by_thread.values())
    print(f"Total primes stored: {total_primes:,}")
    
    if result[0]:
        p, q = result[0]
        print(f"Encontrado: P = {p:,}, Q = {q:,}")
        print(f"Verificación: {p} + {q} = {p + q:,}")
        print(f"Números revisados (total): {total_checks[0]:,}")
    else:
        print("No se encontraron primos P y Q tales que P + Q = M en el tiempo límite.")
        print(f"Números revisados (total): {total_checks[0]:,}")
    
    print(f"Tiempo de ejecución: {time.time() - start_time:.2f} segundos")

# Test with 10^1000
M = 10**1000
print(f"Procesando M = {M:,}")
encontrar_pq_optimo_boundary(M, timeout=1200, max_checks=100000000)
